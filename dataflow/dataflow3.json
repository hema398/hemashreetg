{
	"name": "dataflow3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "df_revenue1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "df_revenue2",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "df_revenue3",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "df_union_output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {product id} as string,",
				"          quantity as string,",
				"          {sales date} as string,",
				"          Revenue as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> source1",
				"source(output(",
				"          {product id} as string,",
				"          quantity as string,",
				"          {sales date} as string,",
				"          Revenue as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> source2",
				"source(output(",
				"          {product id} as string,",
				"          quantity as string,",
				"          {sales date} as string,",
				"          Revenue as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> source3",
				"source1, source2, source3 union(byName: true,",
				"     partitionBy('hash', 1))~> union1",
				"union1 aggregate(groupBy({product id}),",
				"     {Total revenue} = sum(toInteger(Revenue)),",
				"     partitionBy('hash', 1)) ~> aggregate1",
				"aggregate1 filter({Total revenue}>50000,",
				"     partitionBy('hash', 1)) ~> filter1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {dept id} as string,",
				"          {Department name } as string,",
				"          DOJ as string,",
				"          addDays as string",
				"     ),",
				"     partitionFileNames:['union_revenue'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}