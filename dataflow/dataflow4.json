{
	"name": "dataflow4",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "df_Duplicates",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Df_duplicate_output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "Df_duplicate_output",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          {emp name} as string,",
				"          {dept name} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 aggregate(groupBy(empid),",
				"     counts = count(empid)) ~> aggregate1",
				"aggregate1 split(counts>1,",
				"     disjoint: false) ~> split1@(DuplicateRecords, Validrecords)",
				"split1@DuplicateRecords sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {dept id} as string,",
				"          {Department name } as string,",
				"          DOJ as string,",
				"          addDays as string",
				"     ),",
				"     partitionFileNames:['duplicates'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"split1@Validrecords sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {dept id} as string,",
				"          {Department name } as string,",
				"          DOJ as string,",
				"          addDays as string",
				"     ),",
				"     partitionFileNames:['validaterecords'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}